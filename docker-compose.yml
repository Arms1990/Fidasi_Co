version: '3.7'

volumes:
  pgdata:
    driver: local
  zookeeper_data:
    driver: local 
  kafka_data:
    driver: local
  nifi_data:
    driver: local

services:
  back-office:
    build: ./back-office
    container_name: back-office
    env_file: .env
    volumes:
      - ./back-office:/src
      - /src/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - CI=true
      - NODE_ENV=${NODE_ENV}
      - PORT=${BACK_OFFICE_PORT}
      - REACT_APP_APPLICATION_HOST=${APPLICATION_HOST}
      - REACT_APP_APPLICATION_PROTOCOL=${APPLICATION_PROTOCOL}
      - REACT_APP_GATEWAY_PORT=${GATEWAY_PORT}
      - REACT_APP_IDENTITY_SERVER_PORT=${IDENTITY_SERVER_PORT}
      - REACT_APP_LIBRARY_SERVICE_PORT=${LIBRARY_SERVICE_PORT}
      - REACT_APP_NOTIFICATION_SERVICE_PORT=${NOTIFICATION_SERVICE_PORT}
      - REACT_APP_CLIENT_ID=${CLIENT_ID}
      - REACT_APP_CLIENT_SECRET=${CLIENT_SECRET}
    ports:
      - ${BACK_OFFICE_PORT}:${BACK_OFFICE_PORT}
    depends_on:
      - server

  front-office:
    build: ./front-office
    container_name: front-office
    env_file: .env
    volumes:
      - ./front-office:/src
      - /src/node_modules
      - /src/dist
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${FRONT_OFFICE_PORT}
      - APPLICATION_HOST=${APPLICATION_HOST}
      - APPLICATION_PROTOCOL=${APPLICATION_PROTOCOL}
      - GATEWAY_PORT=${GATEWAY_PORT}
      - IDENTITY_SERVER_PORT=${IDENTITY_SERVER_PORT}
      - LIBRARY_SERVICE_PORT=${LIBRARY_SERVICE_PORT}
      - NOTIFICATION_SERVICE_PORT=${NOTIFICATION_SERVICE_PORT}
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
    ports:
      - ${FRONT_OFFICE_PORT}:${FRONT_OFFICE_PORT}
    depends_on:
      - back-office

  server:
    build: .
    container_name: server
    env_file: .env
    restart: on-failure
    volumes:
      - ./services:/src
      - /src/node_modules
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
      - ${IDENTITY_SERVER_PORT}:${IDENTITY_SERVER_PORT}
      - ${LIBRARY_SERVICE_PORT}:${LIBRARY_SERVICE_PORT}
      - ${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_PORT}
      - ${COMMUNICATION_SERVICE_PORT}:${COMMUNICATION_SERVICE_PORT}
    depends_on:
      - postgres

  postgres:
    image: postgres:12
    container_name: postgres
    env_file: .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - ${DATABASE_PORT}:${DATABASE_PORT}
    environment:
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
      - DB_PORT=${DATABASE_PORT}
      - PGDATA=/var/lib/postgresql/data

  postgres-manager:
    image: dpage/pgadmin4
    container_name: postgres-manager
    env_file: .env
    volumes:
      - pgdata:/bitnami
    ports:
      - ${POSTGRES_MANAGER_PORT}:${POSTGRES_MANAGER_PORT}
    environment:
      - PGADMIN_LISTEN_PORT=${POSTGRES_MANAGER_PORT}
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    depends_on:
      - postgres

  zookeeper:
    hostname: zookeeper
    container_name: zookeeper
    image: bitnami/zookeeper:latest
    ports:
      - 2181:2181
    volumes:
      - zookeeper_data:/bitnami
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    depends_on:
      - nifi

  nifi:
     container_name: nifi
     image: apache/nifi:latest
     ports:
       - 32769:8080
     environment:
       - NIFI_WEB_HTTP_PORT=8080
       - NIFI_CLUSTER_IS_NODE=true
       - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
       - NIFI_ZK_CONNECT_STRING=zookeeper:2181
       - NIFI_ELECTION_MAX_WAIT=1 min
     volumes:
       - ./services/storage/uploads:/home/nifi/data/inbound/rec
#       - ./nifi/lib:/home/nifi/lib
       - nifi_data:/home/nifi

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - 9092:9092
    volumes:
      - kafka_data:/bitnami
    environment:
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper