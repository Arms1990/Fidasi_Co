{"version":3,"sources":["../node_modules/reactstrap/es/Input.js","views/user/login.js","components/common/CustomBootstrap.js","components/common/react-notifications/index.js","helpers/IntlMessages.js"],"names":["propTypes","children","PropTypes","node","type","string","size","oneOfType","number","bsSize","valid","bool","invalid","tag","tagPropType","innerRef","object","func","plaintext","addon","className","cssModule","Input","_React$Component","props","_this","call","this","getRef","bind","_assertThisInitialized","focus","_inheritsLoose","_proto","prototype","ref","render","_this$props","attributes","_objectWithoutPropertiesLoose","checkInput","indexOf","isNotaNumber","RegExp","Tag","formControlClass","test","warnOnce","classes","mapToCssModules","classNames","React","createElement","_extends","Component","defaultProps","Login","constructor","super","onUserLogin","values","a","loading","email","password","loginUser","history","validateEmail","value","error","validatePassword","length","state","oneTimePassword","formickRef","createRef","componentDidUpdate","NotificationManager","warning","verifyUser","authenticationServer","clientID","clientSecret","fetch","method","headers","Accept","body","URLSearchParams","username","client_id","client_secret","grant_type","otp","request","ok","json","tempResponse","message","statusText","response","loginUserSuccess","showAuthenticator","initialValues","document","classList","add","title","xxs","md","to","id","onSubmit","errors","touched","name","validate","color","backdrop","contentClassName","centered","isOpen","toggle","toggleAuthenticatorState","for","onChange","event","setState","target","onClick","connect","authUser","user","qr","frontOfficeURL","Colxx","widths","Separator","Notifications","injectIntl","withRef"],"mappings":"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","file":"static/js/user-login.e2f8ed52.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\n\n/* eslint react/prefer-stateless-function: 0 */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, warnOnce, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  type: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  bsSize: PropTypes.string,\n  valid: PropTypes.bool,\n  invalid: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  plaintext: PropTypes.bool,\n  addon: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  type: 'text'\n};\n\nvar Input = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Input, _React$Component);\n\n  function Input(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.focus = _this.focus.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Input.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.focus = function focus() {\n    if (this.ref) {\n      this.ref.focus();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        type = _this$props.type,\n        bsSize = _this$props.bsSize,\n        valid = _this$props.valid,\n        invalid = _this$props.invalid,\n        tag = _this$props.tag,\n        addon = _this$props.addon,\n        plaintext = _this$props.plaintext,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"type\", \"bsSize\", \"valid\", \"invalid\", \"tag\", \"addon\", \"plaintext\", \"innerRef\"]);\n\n    var checkInput = ['radio', 'checkbox'].indexOf(type) > -1;\n    var isNotaNumber = new RegExp('\\\\D', 'g');\n    var fileInput = type === 'file';\n    var textareaInput = type === 'textarea';\n    var selectInput = type === 'select';\n    var rangeInput = type === 'range';\n    var Tag = tag || (selectInput || textareaInput ? type : 'input');\n    var formControlClass = 'form-control';\n\n    if (plaintext) {\n      formControlClass = formControlClass + \"-plaintext\";\n      Tag = tag || 'input';\n    } else if (fileInput) {\n      formControlClass = formControlClass + \"-file\";\n    } else if (rangeInput) {\n      formControlClass = formControlClass + \"-range\";\n    } else if (checkInput) {\n      if (addon) {\n        formControlClass = null;\n      } else {\n        formControlClass = 'form-check-input';\n      }\n    }\n\n    if (attributes.size && isNotaNumber.test(attributes.size)) {\n      warnOnce('Please use the prop \"bsSize\" instead of the \"size\" to bootstrap\\'s input sizing.');\n      bsSize = attributes.size;\n      delete attributes.size;\n    }\n\n    var classes = mapToCssModules(classNames(className, invalid && 'is-invalid', valid && 'is-valid', bsSize ? \"form-control-\" + bsSize : false, formControlClass), cssModule);\n\n    if (Tag === 'input' || tag && typeof tag === 'function') {\n      attributes.type = type;\n    }\n\n    if (attributes.children && !(plaintext || type === 'select' || typeof Tag !== 'string' || Tag === 'select')) {\n      warnOnce(\"Input with a type of \\\"\" + type + \"\\\" cannot have children. Please use \\\"value\\\"/\\\"defaultValue\\\" instead.\");\n      delete attributes.children;\n    }\n\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes,\n      \"aria-invalid\": invalid\n    }));\n  };\n\n  return Input;\n}(React.Component);\n\nInput.propTypes = propTypes;\nInput.defaultProps = defaultProps;\nexport default Input;","import React, { Component } from \"react\";\nimport { Row, Card, CardTitle, Label, FormGroup, Button, Modal, Input, ModalBody } from \"reactstrap\";\nimport { NavLink } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport { NotificationManager } from \"../../components/common/react-notifications\";\nimport { Formik, Form, Field } from \"formik\";\n\nimport { toggleAuthenticatorState, loginUser, loginUserSuccess } from \"../../redux/actions\";\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\nimport IntlMessages from \"../../helpers/IntlMessages\";\nimport { fetch } from \"../../helpers/Utils\";\n\n\n\n// const RawHTML = ({children, className = \"\"}) => <div className={className} dangerouslySetInnerHTML={{ __html: children.replace(/\\n/g, '<br />')}} />\n\n\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n      oneTimePassword: \"\"\n    };\n    this.formickRef = React.createRef();\n  }\n\n  onUserLogin = async (values) => {\n    if (!this.props.loading) {\n      if (values.email !== \"\" && values.password !== \"\") {\n        await this.props.loginUser(values, this.props.history);\n        // this.checkForUpdates();\n      }\n    }\n  }\n\n  validateEmail = (value) => {\n    let error;\n    if (!value) {\n      error = \"Please enter your email address\";\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n      error = \"Invalid email address\";\n    }\n    return error;\n  }\n\n  validatePassword = (value) => {\n    let error;\n    if (!value) {\n      error = \"Please enter your password\";\n    } else if (value.length < 3) {\n      error = \"Value must be longer than 2 characters\";\n    }\n    return error;\n  }\n\n  componentDidUpdate() {\n    const { error } = this.props;\n    if (error) {\n      NotificationManager.warning(error, \"Login Error\", 3000, null, null, '');\n    }\n  }\n\n  // doneScanning() {\n  //   return this.props.toggleAuthenticatorScanningState(this.props.scanningDoneAlready);\n  // }\n\n  async verifyUser() {\n    const { authenticationServer, clientID, clientSecret } = this.props;\n    const { oneTimePassword } = this.state;\n    if(this.formickRef) {\n      const { email, password } = this.formickRef.state.values;\n      const request = await fetch(`${authenticationServer}/tfa/verify`, {\n        method: \"POST\",\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n          username: email,\n          password,\n          client_id: clientID,\n          client_secret: clientSecret,\n          grant_type: 'password',\n          otp: oneTimePassword\n        })\n      });\n      if(!request.ok) {\n        const tempResponse = await request.json();\n        return NotificationManager.error(\n          tempResponse.message || request.statusText,\n          \"Google Authenticator Error\",\n          3000,\n          null,\n          null,\n          ''\n        );\n      }\n      const response = await request.json();\n      return await this.props.loginUserSuccess(response, this.props.history);\n    }\n  }\n\n  render() {\n    const { password, email } = this.state;\n    const { showAuthenticator } = this.props;\n    const initialValues = { email, password };\n    document.body.classList.add('rounded');\n    document.title = `Login | Back Office`;\n    return (\n      <Row className=\"h-100\">\n        <Colxx xxs=\"12\" md=\"7\" className=\"mx-auto my-auto\">\n          <Card className=\"auth-card\">\n            <div className=\"position-relative image-side \">\n              <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n              <p className=\"white mb-0\">\n                Please use your credentials to login.\n                <br />\n                If you are not a member, please{\" \"}\n                <NavLink to={`/register`} className=\"white\">\n                  register\n                </NavLink>\n                .\n              </p>\n            </div>\n            <div className=\"form-side\">\n              <NavLink to={`/`} className=\"white\">\n                <span className=\"logo-single\" />\n              </NavLink>\n              <CardTitle className=\"mb-4\">\n                <IntlMessages id=\"user.login-title\" />\n              </CardTitle>\n\n              <Formik\n                ref={ (ref) => this.formickRef = ref }\n                initialValues={initialValues}\n                onSubmit={this.onUserLogin}>\n                {({ errors, touched }) => (\n                  <Form className=\"av-tooltip tooltip-label-bottom\">\n                    <FormGroup className=\"form-group has-float-label\">\n                      <Label>\n                        <IntlMessages id=\"user.email\" />\n                      </Label>\n                      <Field\n                        className=\"form-control\"\n                        name=\"email\"\n                        // validate={this.validateEmail}\n                      />\n                      {errors.email && touched.email && (\n                        <div className=\"invalid-feedback d-block\">\n                          {errors.email}\n                        </div>\n                      )}\n                    </FormGroup>\n                    <FormGroup className=\"form-group has-float-label\">\n                      <Label>\n                        <IntlMessages id=\"user.password\" />\n                      </Label>\n                      <Field\n                        className=\"form-control\"\n                        type=\"password\"\n                        name=\"password\"\n                        validate={this.validatePassword}\n                      />\n                      {errors.password && touched.password && (\n                        <div className=\"invalid-feedback d-block\">\n                          {errors.password}\n                        </div>\n                      )}\n                    </FormGroup>\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                      <NavLink to={`/user/forgot-password`}>\n                        <IntlMessages id=\"user.forgot-password-question\" />\n                      </NavLink>\n                      <Button\n                        color=\"primary\"\n                        type=\"submit\"\n                        className={`btn-shadow btn-multiple-state ${this.props.loading ? \"show-spinner\" : \"\"}`}\n                        size=\"lg\"\n                      >\n                        <span className=\"spinner d-inline-block\">\n                          <span className=\"bounce1\" />\n                          <span className=\"bounce2\" />\n                          <span className=\"bounce3\" />\n                        </span>\n                        <span className=\"label\"><IntlMessages id=\"user.login-button\" /></span>\n                      </Button>\n                    </div>\n                  </Form>\n                )}\n              </Formik>\n\t\t\t  \n                <Modal backdrop={true} contentClassName=\"p-4\" centered isOpen={showAuthenticator} toggle={ () => this.props.toggleAuthenticatorState(this.props.showAuthenticator) }>\n                  <ModalBody className=\"text-center\">\n                    <h1>Autenticazione Google</h1>\n\n\n                    {/* {\n                      !scanningDoneAlready ?\n                      <div>\n                        <p>Confiura l'autenticazione a due fattori per scansionando il codice QR.</p>\n                        <RawHTML>{ qr }</RawHTML>\n\n                        <p><i>Dovrai configurare la tua App per poter efettuare l'accesso.</i></p>\n                        <Button color=\"primary\" onClick={ () => this.doneScanning() }>Done Scanning</Button>\n                      </div>\n                      :\n                    } */}\n\n                    <div>\n                      <p>L'ultimo passaggio è inserire la password one-time generata dall'App Google Authenticator per verificare la tua identità.</p>\n                      <FormGroup className=\"has-float-label\">\n                        <Label for=\"otp\">One-Time Password</Label>\n                        <Input\n                          id=\"otp\"\n                          type=\"password\"\n                          onChange={ (event) => this.setState({ oneTimePassword: event.target.value }) }\n                        />\n                      </FormGroup>\n                      <Button color=\"primary\" onClick={ () => this.verifyUser() }>Verify One-Time Password</Button>\n                    </div>\n                    \n\n                  </ModalBody>\n                </Modal>\n               \n\n            </div>\n          </Card>\n        </Colxx>\n      </Row>\n    );\n  }\n}\nconst mapStateToProps = ({ authUser }) => {\n  const { user, loading, error, authenticationServer, clientID, clientSecret, qr, showAuthenticator, frontOfficeURL } = authUser;\n  return { user, loading, error, authenticationServer, clientID, clientSecret, qr, showAuthenticator, frontOfficeURL };\n};\n\nexport default connect(\n  mapStateToProps, {\n    toggleAuthenticatorState,\n    loginUser,\n    loginUserSuccess\n  }\n)(Login);\n","import React from 'react';\nimport { Col } from 'reactstrap';\nconst Colxx = (props) => (\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = (props) => (\n    <div className={`separator ${props.className}`}></div>\n);\nexport { Colxx,Separator }","import Notifications from './Notifications.js';\nimport NotificationContainer from './NotificationContainer';\nimport NotificationManager from './NotificationManager';\n\nexport { Notifications, NotificationContainer, NotificationManager };\nexport default Notifications;\n","import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = props => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n    withRef: false\n});\n"],"sourceRoot":""}