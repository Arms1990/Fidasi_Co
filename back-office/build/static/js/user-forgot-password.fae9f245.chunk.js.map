{"version":3,"sources":["views/user/forgot-password.js","components/common/CustomBootstrap.js","components/common/react-notifications/index.js","helpers/IntlMessages.js"],"names":["ForgotPassword","Component","constructor","props","super","onForgotPassword","values","this","loading","email","forgotPassword","history","validateEmail","value","error","test","state","formickRef","React","createRef","componentDidUpdate","NotificationManager","warning","forgotUserMail","resetForm","success","forgotUserMessage","componentDidMount","document","title","render","initialValues","className","xxs","md","to","id","ref","onSubmit","errors","touched","name","color","size","connect","authUser","Colxx","widths","Separator","Notifications","injectIntl","withRef"],"mappings":"kHAAA,yIAUA,MAAMA,UAAuBC,YAC3BC,YAAYC,GACVC,MAAMD,GADW,KAQnBE,iBAAoBC,IACbC,KAAKJ,MAAMK,SACO,KAAjBF,EAAOG,OACTF,KAAKJ,MAAMO,eAAeJ,EAAQC,KAAKJ,MAAMQ,UAXhC,KAgBnBC,cAAiBC,IACf,IAAIC,EAMJ,OALKD,EAEO,4CAA4CE,KAAKF,KAC3DC,EAAQ,yBAFRA,EAAQ,kCAIHA,GArBPP,KAAKS,MAAQ,CACXP,MAAO,IAETF,KAAKU,WAAaC,IAAMC,YAqB1BC,qBACMb,KAAKJ,MAAMW,MACbO,IAAoBC,QAClBf,KAAKJ,MAAMW,MACX,wBACA,IACA,KACA,KACA,IAGGP,KAAKJ,MAAMK,SAAyC,YAA9BD,KAAKJ,MAAMoB,iBACjChB,KAAKU,YACNV,KAAKU,WAAWO,YAElBH,IAAoBI,QAClBlB,KAAKJ,MAAMuB,kBACX,0BACA,IACA,KACA,KACA,KAORC,oBACEC,SAASC,MAAT,gCAIFC,SAAU,MAGFC,EAAgB,CAAEtB,MADNF,KAAKS,MAAfP,OAGR,OACE,kBAAC,IAAD,CAAKuB,UAAU,SACb,kBAAC,IAAD,CAAOC,IAAI,KAAKC,GAAG,IAAIF,UAAU,mBAC/B,kBAAC,IAAD,CAAMA,UAAU,aACd,yBAAKA,UAAU,iCACb,uBAAGA,UAAU,iBAAb,2BACA,uBAAGA,UAAU,cAAb,kDACiD,6BADjD,kCAEkC,IAChC,kBAAC,IAAD,CAASG,GAAE,YAAeH,UAAU,SAApC,YAHF,MASF,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAASG,GAAE,IAAOH,UAAU,SAC1B,0BAAMA,UAAU,iBAElB,kBAAC,IAAD,CAAWA,UAAU,QACnB,kBAAC,IAAD,CAAcI,GAAG,0BAGnB,kBAAC,IAAD,CACEC,IAAOA,GAAQ9B,KAAKU,WAAaoB,EACjCN,cAAeA,EACfO,SAAU/B,KAAKF,kBACd,EAAGkC,SAAQC,aACV,kBAAC,IAAD,CAAMR,UAAU,mCACd,kBAAC,IAAD,CAAWA,UAAU,8BACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAcI,GAAG,gBAEnB,kBAAC,IAAD,CACEJ,UAAU,eACVS,KAAK,UAGNF,EAAO9B,OAAS+B,EAAQ/B,OACvB,yBAAKuB,UAAU,4BACZO,EAAO9B,QAKd,yBAAKuB,UAAU,qDACb,kBAAC,IAAD,CAASG,GAAE,eACT,kBAAC,IAAD,CAAcC,GAAG,yBAEnB,kBAAC,IAAD,CACEM,MAAM,UACNV,UAAS,wCAAmCzB,KAAKJ,MAAMK,QAAU,eAAiB,IAClFmC,KAAK,MAEL,0BAAMX,UAAU,0BACd,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,aAElB,0BAAMA,UAAU,SAAQ,kBAAC,IAAD,CAAcI,GAAG,yCAmBlDQ,sBALS,EAAGC,eAElB,CAAEtB,eADqDsB,EAAtDtB,eACiBG,kBADqCmB,EAAtCnB,kBACoBlB,QADkBqC,EAAnBrC,QACUM,MADS+B,EAAV/B,QAMpD,CACEJ,oBAHWkC,CAKb5C,I,gCC9JF,iGAEA,MAAM8C,EAAS3C,GACX,kBAAC,IAAD,iBAASA,EAAT,CAAgB4C,OAAQ,CAAC,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,UAE5DC,EAAa7C,GACf,yBAAK6B,UAAS,oBAAe7B,EAAM6B,c,gCCNvC,mEAKeiB,EAAf,G,gCCLA,6BAKeC,gBAFO/C,GAAS,kBAAC,IAAqBA,GAEZ,CACrCgD,SAAS","file":"static/js/user-forgot-password.fae9f245.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from \"reactstrap\";\nimport { NavLink } from \"react-router-dom\";\nimport { Formik, Form, Field } from \"formik\";\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\nimport IntlMessages from \"../../helpers/IntlMessages\";\nimport { forgotPassword } from \"../../redux/actions\";\nimport { NotificationManager } from \"../../components/common/react-notifications\";\nimport { connect } from \"react-redux\";\n\nclass ForgotPassword extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\"\n    };\n    this.formickRef = React.createRef();\n  }\n\n  onForgotPassword = (values) => {\n    if (!this.props.loading) {\n      if (values.email !== \"\") {\n        this.props.forgotPassword(values, this.props.history);\n      }\n    }\n  }\n\n  validateEmail = (value) => {\n    let error;\n    if (!value) {\n      error = \"Please enter your email address\";\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n      error = \"Invalid email address\";\n    }\n    return error;\n  }\n\n  componentDidUpdate() {\n    if (this.props.error) {\n      NotificationManager.warning(\n        this.props.error,\n        \"Forgot Password Error\",\n        3000,\n        null,\n        null,\n        ''\n      );\n    } else {\n      if (!this.props.loading && this.props.forgotUserMail === \"success\") {\n        if(this.formickRef) {\n          this.formickRef.resetForm();\n        }\n        NotificationManager.success(\n          this.props.forgotUserMessage,\n          \"Forgot Password Success\",\n          3000,\n          null,\n          null,\n          ''\n        );\n      }\n    }\n\n  }\n\n  componentDidMount() {\n    document.title = `Forgot Password | Back Office`;\n  }\n\n\n  render() {\n\n    const { email } = this.state;\n    const initialValues = { email };\n\n    return (\n      <Row className=\"h-100\">\n        <Colxx xxs=\"12\" md=\"7\" className=\"mx-auto my-auto\">\n          <Card className=\"auth-card\">\n            <div className=\"position-relative image-side \">\n              <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n              <p className=\"white mb-0\">\n                Please use your e-mail to reset your password. <br />\n                If you are not a member, please{\" \"}\n                <NavLink to={`/register`} className=\"white\">\n                  register\n                </NavLink>\n                .\n              </p>\n            </div>\n            <div className=\"form-side\">\n              <NavLink to={`/`} className=\"white\">\n                <span className=\"logo-single\" />\n              </NavLink>\n              <CardTitle className=\"mb-4\">\n                <IntlMessages id=\"user.forgot-password\" />\n              </CardTitle>\n\n              <Formik\n                ref={ (ref) => this.formickRef = ref }\n                initialValues={initialValues}\n                onSubmit={this.onForgotPassword}>\n                {({ errors, touched }) => (\n                  <Form className=\"av-tooltip tooltip-label-bottom\">\n                    <FormGroup className=\"form-group has-float-label\">\n                      <Label>\n                        <IntlMessages id=\"user.email\" />\n                      </Label>\n                      <Field\n                        className=\"form-control\"\n                        name=\"email\"\n                        // validate={this.validateEmail}\n                      />\n                      {errors.email && touched.email && (\n                        <div className=\"invalid-feedback d-block\">\n                          {errors.email}\n                        </div>\n                      )}\n                    </FormGroup>\n\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                      <NavLink to={`/user/login`}>\n                        <IntlMessages id=\"user.login-question\" />\n                      </NavLink>\n                      <Button\n                        color=\"primary\"\n                        className={`btn-shadow btn-multiple-state ${this.props.loading ? \"show-spinner\" : \"\"}`}\n                        size=\"lg\"\n                      >\n                        <span className=\"spinner d-inline-block\">\n                          <span className=\"bounce1\" />\n                          <span className=\"bounce2\" />\n                          <span className=\"bounce3\" />\n                        </span>\n                        <span className=\"label\"><IntlMessages id=\"user.reset-password-button\" /></span>\n                      </Button>\n                    </div>\n                  </Form>\n                )}\n              </Formik>\n            </div>\n          </Card>\n        </Colxx>\n      </Row>\n    );\n  }\n}\n\nconst mapStateToProps = ({ authUser }) => {\n  const { forgotUserMail, forgotUserMessage, loading, error } = authUser;\n  return { forgotUserMail, forgotUserMessage, loading, error };\n};\n\nexport default connect(\n  mapStateToProps,\n  {\n    forgotPassword\n  }\n)(ForgotPassword);\n\n","import React from 'react';\nimport { Col } from 'reactstrap';\nconst Colxx = (props) => (\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = (props) => (\n    <div className={`separator ${props.className}`}></div>\n);\nexport { Colxx,Separator }","import Notifications from './Notifications.js';\nimport NotificationContainer from './NotificationContainer';\nimport NotificationManager from './NotificationManager';\n\nexport { Notifications, NotificationContainer, NotificationManager };\nexport default Notifications;\n","import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = props => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n    withRef: false\n});\n"],"sourceRoot":""}