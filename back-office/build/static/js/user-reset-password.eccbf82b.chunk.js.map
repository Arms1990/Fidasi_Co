{"version":3,"sources":["views/user/reset-password.js","components/common/CustomBootstrap.js","components/common/react-notifications/index.js","helpers/IntlMessages.js"],"names":["ResetPassword","Component","constructor","props","super","onResetPassword","values","this","loading","oobCode","URLSearchParams","location","search","get","newPassword","resetPassword","resetPasswordCode","history","NotificationManager","warning","validateNewPassword","newPasswordAgain","errors","state","formickRef","React","createRef","componentDidMount","document","title","componentDidUpdate","error","resetForm","success","resetPasswordMessage","push","render","initialValues","className","xxs","md","to","id","ref","validate","onSubmit","touched","name","type","color","size","withRouter","connect","authUser","Colxx","widths","Separator","Notifications","injectIntl","withRef"],"mappings":"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","file":"static/js/user-reset-password.eccbf82b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from \"reactstrap\";\nimport { NavLink, withRouter } from \"react-router-dom\";\nimport { Formik, Form, Field } from \"formik\";\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\nimport IntlMessages from \"../../helpers/IntlMessages\";\nimport { resetPassword } from \"../../redux/actions\";\nimport { NotificationManager } from \"../../components/common/react-notifications\";\nimport { connect } from \"react-redux\";\n\nclass ResetPassword extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newPassword: '',\n            newPasswordAgain: ''\n        };\n        this.formickRef = React.createRef();\n    }\n\n    onResetPassword = (values) => {\n        if (!this.props.loading) {\n            const params = new URLSearchParams(this.props.location.search);\n            const oobCode = params.get('oobCode');\n            if (oobCode) {\n                if (values.newPassword !== \"\") {\n                    this.props.resetPassword({ newPassword: values.newPassword, resetPasswordCode: oobCode, history: this.props.history });\n                }\n            } else {\n                NotificationManager.warning(\n                    \"Please check your email URL.\",\n                    \"Reset Password Error\",\n                    3000,\n                    null,\n                    null,\n                    ''\n                );\n            }\n\n        }\n    }\n\n    validateNewPassword = (values) => {\n        const { newPassword, newPasswordAgain } = values;\n        let errors = {};\n        if (newPasswordAgain && newPassword !== newPasswordAgain) {\n            errors.newPasswordAgain = \"Please check your new password\";\n        }\n        return errors;\n    }\n\n    componentDidMount() {\n        document.title = `Reset Password | Back Office`;\n    }\n\n    componentDidUpdate() {\n        if (this.props.error) {\n            NotificationManager.warning(\n                this.props.error,\n                \"Forgot Password Error\",\n                3000,\n                null,\n                null,\n                ''\n            );\n        } else {\n            if (!this.props.loading && this.props.newPassword === \"success\") {\n                if(this.formickRef) {\n                    this.formickRef.resetForm();\n                }\n                NotificationManager.success(\n                    this.props.resetPasswordMessage,\n                    \"Reset Password Success\",\n                    3000,\n                    () => this.props.history.push('/user/login'),\n                    null,\n                    ''\n                );\n            }\n        }\n\n    }\n\n\n    render() {\n        const { newPassword, newPasswordAgain } = this.state;\n        const initialValues = { newPassword, newPasswordAgain };\n\n        return (\n            <Row className=\"h-100\">\n                <Colxx xxs=\"12\" md=\"7\" className=\"mx-auto my-auto\">\n                    <Card className=\"auth-card\">\n                        <div className=\"position-relative image-side \">\n                            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n                            <p className=\"white mb-0\">\n                                Please use your e-mail to reset your password. <br />\n                                If you are not a member, please{\" \"}\n                                <NavLink to={`/register`} className=\"white\">register</NavLink>.</p>\n                        </div>\n                        <div className=\"form-side\">\n                            <NavLink to={`/`} className=\"white\">\n                                <span className=\"logo-single\" />\n                            </NavLink>\n                            <CardTitle className=\"mb-4\">\n                                <IntlMessages id=\"user.reset-password\" />\n                            </CardTitle>\n\n                            <Formik\n                                ref={ (ref) => this.formickRef = ref }\n                                validate={this.validateNewPassword}\n                                initialValues={initialValues}\n                                onSubmit={this.onResetPassword}>\n                                {({ errors, touched }) => (\n                                    <Form className=\"av-tooltip tooltip-label-bottom\">\n                                        <FormGroup className=\"form-group has-float-label\">\n                                            <Label>\n                                                <IntlMessages id=\"user.new-password\" />\n                                            </Label>\n                                            <Field\n                                                className=\"form-control\"\n                                                name=\"newPassword\"\n                                                type=\"password\"\n                                            />\n                                        </FormGroup>\n                                        <FormGroup className=\"form-group has-float-label\">\n                                            <Label>\n                                                <IntlMessages id=\"user.new-password-again\" />\n                                            </Label>\n                                            <Field\n                                                className=\"form-control\"\n                                                name=\"newPasswordAgain\"\n                                                type=\"password\"\n                                            />\n                                            {errors.newPasswordAgain && touched.newPasswordAgain && (\n                                                <div className=\"invalid-feedback d-block\">\n                                                    {errors.newPasswordAgain}\n                                                </div>\n                                            )}\n                                        </FormGroup>\n\n                                        <div className=\"d-flex justify-content-end align-items-center\">\n                                            {/* <NavLink to={`/user/login`}>\n                                                <IntlMessages id=\"user.login-title\" />\n                                            </NavLink> */}\n                                            <Button\n                                                color=\"primary\"\n                                                className={`btn-shadow btn-multiple-state ${this.props.loading ? \"show-spinner\" : \"\"}`}\n                                                size=\"lg\"\n                                            >\n                                                <span className=\"spinner d-inline-block\">\n                                                    <span className=\"bounce1\" />\n                                                    <span className=\"bounce2\" />\n                                                    <span className=\"bounce3\" />\n                                                </span>\n                                                <span className=\"label\"><IntlMessages id=\"user.reset-password-button\" /></span>\n                                            </Button>\n                                        </div>\n                                    </Form>\n                                )}\n                            </Formik>\n                        </div>\n                    </Card>\n                </Colxx>\n            </Row>\n        );\n    }\n}\n\nconst mapStateToProps = ({ authUser }) => {\n    const { newPassword, resetPasswordCode, resetPasswordMessage, loading, error } = authUser;\n    return { newPassword, resetPasswordCode, resetPasswordMessage, loading, error };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        {\n            resetPassword\n        }\n    )(ResetPassword)\n);\n\n","import React from 'react';\nimport { Col } from 'reactstrap';\nconst Colxx = (props) => (\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = (props) => (\n    <div className={`separator ${props.className}`}></div>\n);\nexport { Colxx,Separator }","import Notifications from './Notifications.js';\nimport NotificationContainer from './NotificationContainer';\nimport NotificationManager from './NotificationManager';\n\nexport { Notifications, NotificationContainer, NotificationManager };\nexport default Notifications;\n","import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = props => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n    withRef: false\n});\n"],"sourceRoot":""}